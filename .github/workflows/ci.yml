name: validation

on:
  pull_request:
    types: [ opened, synchronize, reopened, closed ]
  release:
    types: [ published, created, edited ]
  workflow_dispatch:
  schedule:
    # daily
    - cron:  '0 0 * * *'

jobs:

  yocto-dunfell-latest:
  
    env:
      YOCTO_VERSION: 3.1.11
      YOCTO_BRANCH: dunfell
      
    runs-on: [self-hosted, linux]
    
    container:
      image: ghcr.io/meta-flutter/ubuntu-20-dev:main
      options: --user 1018 --storage-opt overlay.mount_program=/usr/bin/fuse-overlayfs --storage-opt overlay.mountopt=nodev,metacopy=on,noxattrs=1 -v /b/github-ci/download:/home/dev/dl:Z -v /b/github-ci/sstate/yocto/dunfell/latest:/home/dev/sstate:Z -v /b/github-ci/artifacts/yocto/dunfell/latest:/home/dev/artifacts:Z      
    steps:
    
      - name: Display UID Info
        run: |
          whoami
          id -u
          
      - name: Set Ownership
        run: |
          chown -R dev:dev $HOME .
          
      - uses: actions/checkout@v2
        with:
          path: meta-flutter

      - name: Fetch poky
        run: |
          [ -d ../yocto-dunfell-latest ] || mkdir -p ../yocto-dunfell-latest
          cd ../yocto-dunfell-latest
          pwd
          ls -la
          mv poky/build/sstate-cache . || true
          rm -rf poky meta-openembedded meta-clang
          git clone -b ${{ env.YOCTO_BRANCH }} --single-branch git://git.yoctoproject.org/poky &
          git clone -b ${{ env.YOCTO_BRANCH }} --single-branch git://git.openembedded.org/meta-openembedded &
          git clone -b ${{ env.YOCTO_BRANCH }} --single-branch https://github.com/kraj/meta-clang.git &
          wait

      - name: Configure build
        shell: bash
        working-directory: ../yocto-dunfell-latest/poky
        run: |
          . ./oe-init-build-env
          echo '***************************************'
          echo 'INHERIT += "rm_work"' >> ./conf/local.conf
          echo 'DL_DIR = "/home/dev/dl"' >> ./conf/local.conf
          echo 'SSTATE_DIR = "/home/dev/sstate"' >> ./conf/local.conf
          echo 'SSTATE_MIRRORS = "file://.* file:///home/dev/sstate/PATH"' >> ./conf/local.conf
          echo 'SSTATE_MIRRORS += "file://.* http://sstate.yoctoproject.org/${{ env.YOCTO_VERSION }}/PATH;downloadfilename=PATH"' >> ./conf/local.conf
          echo 'INIT_MANAGER = "systemd"' >> ./conf/local.conf
          echo 'DISTRO_FEATURES_remove = " sysvinit x11"' >> ./conf/local.conf
          echo 'DISTRO_FEATURES_append = " wayland opengl systemd"' >> ./conf/local.conf
          echo 'DISTRO_FEATURES_BACKFILL_CONSIDERED = ""' >> ./conf/local.conf
          echo 'VIRTUAL-RUNTIME_init_manager = "systemd"' >> ./conf/local.conf
          echo 'VIRTUAL-RUNTIME_initscripts = ""' >> ./conf/local.conf
          echo 'PREFERRED_PROVIDER_virtual/kernel = "linux-dummy"' >> ./conf/local.conf
          echo 'FLUTTER_CHANNEL = "dev"' >> ./conf/local.conf
          echo 'PACKAGECONFIG_pn-flutter-engine = "embedder-for-target disable-desktop-embeddings fontconfig full-dart-sdk mode-debug"' >> ./conf/local.conf
          echo '********** ./conf/local.conf **********'
          cat ./conf/local.conf
          echo '***************************************'
          bitbake-layers add-layer ../../meta-openembedded/meta-oe ../../meta-clang ../../../meta-flutter
          bitbake-layers show-layers
          echo '***************************************'
          bitbake -e virtual/kernel | grep "^PV"
          bitbake -e virtual/kernel | grep "^PN"

      - name: Build core-image-minimal
        shell: bash
        working-directory: ../yocto-dunfell-latest/poky
        run: |
          . ./oe-init-build-env
          rm -rf /home/dev/artifacts/*
          bitbake core-image-minimal
          cp tmp/deploy/images/qemux86-64/* /home/dev/artifacts

      - name: Publish core-image-minimal artifacts
        uses: actions/upload-artifact@v2
        with:
          name: core-image-minimal-core2_64-linux
          path: |
            /home/dev/artifacts/*

      - name: Build flutter-engine
        shell: bash
        working-directory: ../yocto-dunfell-latest/poky
        run: |
          . ./oe-init-build-env
          rm -rf /home/dev/artifacts/*
          bitbake flutter-engine
          cp tmp/deploy/rpm/core2_64/flutter-engine*.rpm /home/dev/artifacts

      - name: Publish flutter-engine artifacts
        uses: actions/upload-artifact@v2
        with:
          name: flutter-engine-core2_64-linux
          path: |
            /home/dev/artifacts/*.rpm

      - name: Build ivi-homescreen
        shell: bash
        working-directory: ../yocto-dunfell-latest/poky
        run: |
          . ./oe-init-build-env
          rm -rf /home/dev/artifacts/*
          bitbake ivi-homescreen
          cp tmp/deploy/rpm/core2_64/ivi-homescreen*.rpm /home/dev/artifacts

      - name: Publish ivi-homescreen artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ivi-homescreen-core2_64-linux
          path: |
             /home/dev/artifacts/*.rpm

      - name: Build flutter-wayland
        shell: bash
        working-directory: ../yocto-dunfell-latest/poky
        run: |
          . ./oe-init-build-env
          rm -rf /home/dev/artifacts/*
          bitbake flutter-wayland
          cp tmp/deploy/rpm/core2_64/flutter-wayland*.rpm /home/dev/artifacts

      - name: Publish flutter-wayland artifacts
        uses: actions/upload-artifact@v2
        with:
          name: flutter-wayland-core2_64-linux
          path: |
             /home/dev/artifacts/*.rpm

      - name: Build flutter-pi
        shell: bash
        working-directory: ../yocto-dunfell-latest/poky
        run: |
          . ./oe-init-build-env
          rm -rf /home/dev/artifacts/*
          bitbake flutter-pi
          cp tmp/deploy/rpm/core2_64/flutter-pi*.rpm /home/dev/artifacts

      - name: Publish flutter-pi artifacts
        uses: actions/upload-artifact@v2
        with:
          name: flutter-pi-core2_64-linux
          path: |
             /home/dev/artifacts/*.rpm

      - name: Build agl-flutter-hvac
        shell: bash
        working-directory: ../yocto-dunfell-latest/poky
        run: |
          . ./oe-init-build-env
          rm -rf /home/dev/artifacts/*
          bitbake agl-flutter-hvac
          cp tmp/deploy/rpm/core2_64/agl-flutter-hvac*.rpm /home/dev/artifacts

      - name: Publish agl-flutter-hvac artifacts
        uses: actions/upload-artifact@v2
        with:
          name: agl-flutter-hvac-core2_64-linux
          path: |
             /home/dev/artifacts/*.rpm

      - name: Build flutter-gallery
        shell: bash
        working-directory: ../yocto-dunfell-latest/poky
        run: |
          . ./oe-init-build-env
          rm -rf /home/dev/artifacts/*
          bitbake flutter-gallery
          cp tmp/deploy/rpm/core2_64/flutter-gallery*.rpm /home/dev/artifacts

      - name: Publish flutter-gallery artifacts
        uses: actions/upload-artifact@v2
        with:
          name: flutter-gallery-core2_64-linux
          path: |
             /home/dev/artifacts/*.rpm
            

  agl-lamprey:
  
    env:
      YOCTO_VERSION: 3.1.8
      YOCTO_BRANCH: dunfell
      MACHINE: qemux86-64
      AGL_BRANCH: lamprey

    runs-on: [self-hosted, linux]
    
    container:
      image: ghcr.io/meta-flutter/ubuntu-20-dev:main
      options: --user 1018 --storage-opt overlay.mount_program=/usr/bin/fuse-overlayfs --storage-opt overlay.mountopt=nodev,metacopy=on,noxattrs=1 -v /b/github-ci/download:/home/dev/dl:Z -v /b/github-ci/sstate/agl/lampry:/home/dev/sstate:Z -v /b/github-ci/artifacts/agl/lamprey:/home/dev/artifacts:Z
      
    steps:
    
      - name: Display UID Info
        run: |
          whoami
          id -u
          
      - name: Set Ownership
        run: |
          chown -R dev:dev $HOME .
          
      - uses: actions/checkout@v2

      - name: Fetch Layers
        run: |
          [ -d ../agl-lamprey ] || mkdir -p ../agl-lamprey
          cd ../agl-lamprey
          rm -rf .repo
          rm -rf meta-agl-flutter
          /home/dev/bin/repo init -b ${{ env.AGL_BRANCH }} -u https://gerrit.automotivelinux.org/gerrit/AGL/AGL-repo --no-clone-bundle
          /home/dev/bin/repo sync --no-clone-bundle -j `grep -c ^processor /proc/cpuinfo` &
          git clone https://github.com/meta-flutter/meta-agl-flutter.git &
          wait
          
      - name: Configure AGL build
        shell: bash
        working-directory: ../agl-lamprey
        run: |
          . ./meta-agl/scripts/aglsetup.sh -m ${{ env.MACHINE }} agl-devel agl-basesystem
          echo '***************************************'
          echo 'INHERIT += "rm_work"' >> ./conf/local.conf
          echo 'DL_DIR = "/home/dev/dl"' >> ./conf/local.conf
          echo 'SSTATE_DIR = "/home/dev/sstate"' >> ./conf/local.conf
          echo 'SSTATE_MIRRORS = "file://.* file:///home/dev/sstate/PATH"' >> ./conf/local.conf
          echo 'SSTATE_MIRRORS += "file://.* http://sstate.yoctoproject.org/${{ env.YOCTO_VERSION }}/PATH;downloadfilename=PATH"' >> ./conf/local.conf
          echo 'FLUTTER_CHANNEL = "dev"' >> ./conf/local.conf
          echo 'PACKAGECONFIG_pn-flutter-engine = "embedder-for-target disable-desktop-embeddings fontconfig full-dart-sdk mode-debug"' >> ./conf/local.conf
          echo '***************************************'
          bitbake-layers add-layer ../../meta-flutter ../meta-agl-flutter
          bitbake-layers show-layers
          echo '***************************************'
          bitbake -e virtual/kernel | grep "^PV"
          bitbake -e virtual/kernel | grep "^PN"
          echo '***************************************'

      - name: Build agl-image-weston
        shell: bash
        working-directory: ../agl-lamprey
        run: |
          . ./build/agl-init-build-env
          rm -rf /home/dev/artifacts/*
          bitbake agl-image-weston
          cp tmp/deploy/images/qemux86-64/* /home/dev/artifacts

      - name: Publish agl-image-weston artifacts
        uses: actions/upload-artifact@v2
        with:
          name: agl-image-weston-qemux86-64-linux
          path: |
             /home/dev/artifacts/*

      - name: Build flutter-engine
        shell: bash
        working-directory: ../agl-lamprey
        run: |
          . ./build/agl-init-build-env
          rm -rf /home/dev/artifacts/*
          bitbake flutter-engine
          cp tmp/deploy/rpm/corei7_64/flutter-engine*.rpm /home/dev/artifacts

      - name: Publish flutter-engine artifacts
        uses: actions/upload-artifact@v2
        with:
          name: flutter-engine-qemux86-64-linux
          path: |
             /home/dev/artifacts/*.rpm

      - name: Build ivi-homescreen
        shell: bash
        working-directory: ../agl-lamprey
        run: |
          . ./build/agl-init-build-env
          rm -rf /home/dev/artifacts/*
          bitbake ivi-homescreen
          cp tmp/deploy/rpm/corei7_64/ivi-homescreen*.rpm /home/dev/artifacts

      - name: Publish ivi-homescreen artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ivi-homescreen-qemux86-64-linux
          path: |
             /home/dev/artifacts/*.rpm

      - name: Build agl-flutter-hvac
        shell: bash
        working-directory: ../agl-lamprey
        run: |
          . ./oe-init-build-env
          rm -rf /home/dev/artifacts/*
          bitbake agl-flutter-hvac
          cp tmp/deploy/rpm/corei7_64/agl-flutter-hvac*.rpm /home/dev/artifacts

      - name: Publish agl-flutter-hvac artifacts
        uses: actions/upload-artifact@v2
        with:
          name: agl-flutter-hvac-qemux86-64-linux
          path: |
             /home/dev/artifacts/*.rpm

      - name: Build flutter-gallery
        shell: bash
        working-directory: ../agl-lamprey
        run: |
          . ./oe-init-build-env
          rm -rf /home/dev/artifacts/*
          bitbake flutter-gallery
          cp tmp/deploy/rpm/corei7_64/flutter-gallery*.rpm /home/dev/artifacts

      - name: Publish flutter-gallery artifacts
        uses: actions/upload-artifact@v2
        with:
          name: flutter-gallery-qemux86-64-linux
          path: |
             /home/dev/artifacts/*.rpm
